// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Web.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarParkingApp.Data.ParkingFloor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("NumberOfSpots");

                    b.Property<int>("ParkingLotId");

                    b.HasKey("Id");

                    b.HasIndex("ParkingLotId");

                    b.ToTable("ParkingFloor");
                });

            modelBuilder.Entity("CarParkingApp.Data.ParkingLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("CompanyName")
                        .IsRequired();

                    b.Property<int>("InitialNumberOfFloors");

                    b.Property<int>("InitialNumberOfSpotsPerFloor");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ParkingLotCode");

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ParkingLot");
                });

            modelBuilder.Entity("CarParkingApp.Data.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ParkingFloorId");

                    b.Property<string>("ParkingSpotCode");

                    b.HasKey("Id");

                    b.HasIndex("ParkingFloorId");

                    b.ToTable("ParkingSpot");
                });

            modelBuilder.Entity("CarParkingApp.Data.Vehicle", b =>
                {
                    b.Property<string>("LicensePlate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Brand")
                        .IsRequired();

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Model")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Owner")
                        .IsRequired();

                    b.Property<int>("ParkingSpotId");

                    b.HasKey("LicensePlate");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ParkingSpotId")
                        .IsUnique();

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("CarParkingApp.Data.ParkingFloor", b =>
                {
                    b.HasOne("CarParkingApp.Data.ParkingLot", "ParkingLot")
                        .WithMany("ParkingFloors")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarParkingApp.Data.ParkingSpot", b =>
                {
                    b.HasOne("CarParkingApp.Data.ParkingFloor", "ParkingFloor")
                        .WithMany("ParkingSpots")
                        .HasForeignKey("ParkingFloorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarParkingApp.Data.Vehicle", b =>
                {
                    b.HasOne("CarParkingApp.Data.ParkingSpot", "ParkingSpot")
                        .WithOne("Vehicle")
                        .HasForeignKey("CarParkingApp.Data.Vehicle", "ParkingSpotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
